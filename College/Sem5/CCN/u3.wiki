= Network Layer =

== Terms ==
* Middleboxes:
** Specialized devices which is meant for new techniques such as NAT, intrustion detection, content caching, etc
* NFV (`Network function Virtualisation`):
** alternative to Middleboxes
* ICMP (`Internet Control Message Protocol`):
** generated by IP software not user
** Common types:
*** Network unreachable
*** TTL expired
*** Destination port not found
*** Echo and echo reply
* Routing Protocols
** BGP (`Border Gateway Protocol`) [Inter AS]
*** I-BGP used for Intra AS routing
** OSPF (`Open Shortest Path First`) [Intra AS]

== Forwarding and Routing ==
=== Network Resolution ===
==== DHCP ====
* State full address configuration 
** When configuration, by the host, of its IP address takes place by contacting DHCP
* Stateless address configuration
** Without contacting DHCP
** Advertisements by local routers, from the prefixes.
** When routers are absent, automatic configuration by the hosts is carried out which is called link-local address.

==== NAT ====
* Static
** a single private / unregistered IP address is mapped with a public / registered IP address and the mapping is done on a one to one basis between local and global addresses
* Dynamic
** Translation of a unregistered IP address into a public / registered IP address from a pool of public IP addresses

==== PAT ====
* This can be called as NAT overload
* Here translation, of multiple private / local IP addresses can be carried out, to a single registered IP addres

----

=== Planes ===
* Data Plane
** Deals with movement of packets across interfaces within a router
** Forwarding is done based on the forwarding table which is stored in a router

* Control Plane
** Deals with routing and management
** Routing is done via various algorithms

=== Approaches ===
* Traditional Approach
** Data plane and control plane implemented in each router
** Each router independently updates the forwarding table using routing algorithms
** The inputs to the routing algorithm are obtained using routing protocols
** Routing protocols allow routers exchange their forwarding tables with one another
** In case the forwarding tables are manually configured (aka static routing), then only the data plane runs in the router
** In case the forwarding tables are manually configured (also known as static routing), then only the data plane runs in the router

* SDN Approach
** Data plane in each router and control plane is centralised
** Routers can fetch the forwarding tables from the remote controller. Similarly, routers can update the link statuses to the remote controller
** Software (e.g., Linux OS code) is used for the fetch and update the remote controller 
** SDN approach is becoming popular especially in datacenter networks (Google, Microsoft) and among some ISPs
** Works on the basis of prefix matching

=== Network Service Models ===
* Guaranteed delivery
** Datagrams will be delivered from sender to reciever reliably
* Guaranteed delivery with bounded delay
** Reliable delivery of datagrams within specified end to end delay
* In order packet delivery
** Packet arrival at destination in the order they were sent
* Guaranteed minimal bandwidth
** Minimum throughput
* Security
** Encryption at source and decryption at destination
* Best effort
** Internet does not provide any network service

----

== Router Architecture ==

=== Input Port ===
* Performs following operations
** PHY - conversion of signal to bit stream
** Link Layer - error detection and decapsulation
** Forwarding - identify output port using forwarding tables
*** Destination (Traditional)
*** Generalized (SDN)
** Queue managment
*** FCFS (First come, First serve)
*** WFQ
* The forwarding table is coppied from the routing processor to the line cards over a seperate bus (ex. PCI)
* For stringent delays higher performance memories are used:- CAMs, DRAMs, SRAMs
* TCAMs (Ternary content addressable memories) store the forwarding table entryies for corresponding 32 bit destination addresses

=== Switching Fabric ===
* Switching Techinques
** Memory
*** Packet copied to system memory
*** Processing on line cards
*** Speed limited by memory and processor
*** One packet at a time
** Interconnection Network
*** Forwards multiple packets in parallel
** Bus
*** Forwarding using a shared bus
*** one packet at a time

=== Output Port ===
* Checksum calculation in IP (because TTL is changed)
* Encapsulation into frames
* Pushing the packets via line cards on to the link
* Bits to signal conversion (i.e., PHY operation)

----

== SDN ==
* Match plus action for all packets
* Match extends checking the header fields of multiple headers
* Actions
** forwarding packet to one or more o/p ports
** load balancing
** blocking/dropping
** NAT
=== Openflow ===
* Remote controller computes, installs and updates the match-plus-action tables (also known as flow tables in OpenFlow)
* OpenFlow 1.0 standard defines the rules for configuring the match-plus-action flow tables and the protocols for controller-router interaction
* P4 (`programming Protocol-independant Packet Processors`) programming language is used
* An entry in flow table consists of:
** Set of header field values
** Set of counters
** Set of actions
** Specialized software used on top of commodity hardware

----
== Routing Algorithms ==
* Types of routing:
** Unicast
** Broadcast
** Multicast
** Anycast (only IPv6)
* Dijkstra (Link state)
** Distance to all nodes are known
* Bellamn Ford (Distance Vector)
** Distance to only neighbor nodes are known
** Asynchronous, distributed, complicated

== Autonomous System (AS) ==
=== OSPF ===
* Port 89
* Uses Dijkstra's algorithm
* Allows multiple same cost paths
* Ares 0 -> Backbone/ Transit area
* Administrative distance of 110
* Uses cost as it's metric based on the bandwidth of link
* No hop limit
* Header :- 24 bytes
* LSAs (`Link State Advertisments`)
** Are send when there is change to one of its links
** Sends only the in the update
** Refreshed every 30 mins
* Tables:
** Neighbor
** Topology
** Routing
* Packets:
** Hello
** Database description
** Link state request
** Link state update
** Link state acknowledgment

=== BGP ===
* Uses Path Vector Control algorithm
* Semi permenant TCP connections
* Used to exhange routing tables accross ASs
* Asynchronous, distributed
* Uses TCP and port 179
* Header :- 20 bytes
* Atributes:
** AS_PATH
** NEXT_HOP
* Messages:
** open
** update
** keep alive
** notification
* Functional Procedure:
** Neighbour acquisition
** Neighbour reachability
** Network reachability
